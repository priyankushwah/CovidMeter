{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","isGrey","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","isloading","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","setLoading","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feab9852.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, isRed, isGrey, active, cases, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isGrey && \"infoBox--grey\"}`}\r\n    >\r\n      <CardContent>\r\n        {/* Title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        {/* Number of Cases */}\r\n        <h2\r\n          className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} ${\r\n            isGrey && \"infoBox__cases--grey\"\r\n          }`}\r\n        >\r\n          {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\r\n        </h2>\r\n\r\n        {/* Total Cases */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204,16,52)\",\r\n    // half_op: \"rgba(204,16,52,0.5)\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    // rgb: \"rgb(125,215,29)\",\r\n    // half_op: \"rgba(125,215,29,0.5)\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    // rgb: \"rgb(251,68,67)\",\r\n    // half_op: \"rgba(251,68,67,0.5)\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => b.cases - a.cases);\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType] / 10) *\r\n        casesTypeColors[casesType].mulitiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      casesType={casesType}\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"000,000\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./InfoBox.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [zoom, setZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    setLoading(true);\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[countryCode]\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setLoading(false);\n        // console.log([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setZoom(4);\n      });\n\n    console.log(countryInfo);\n  };\n\n  return (\n    <div>\n      <div className=\"app\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>Covid-19 tracker</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                onChange={onCountryChange}\n                value={country}\n              >\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app__stats\">\n            <InfoBox\n              onClick={(e) => setCasesType(\"cases\")}\n              title=\"Coronavirus Cases\"\n              isRed\n              active={casesType === \"cases\"}\n              cases={prettyPrintStat(countryInfo.todayCases)}\n              total={numeral(countryInfo.cases).format(\"0.0a\")}\n            />\n            <InfoBox\n              onClick={(e) => setCasesType(\"recovered\")}\n              title=\"Recovered\"\n              active={casesType === \"recovered\"}\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\n              total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            />\n            <InfoBox\n              onClick={(e) => setCasesType(\"deaths\")}\n              title=\"Deaths\"\n              isRed\n              active={casesType === \"deaths\"}\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n              total={numeral(countryInfo.deaths).format(\"0.0a\")}\n            />\n          </div>\n          {/* Map */}\n          <Map\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={zoom}\n            casesType={casesType}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </CardContent>\n          {/* Table */}\n          {/* Graph */}\n        </Card>\n      </div>\n      <div className=\"footer\">\n        <h3>\n          This Project is Designed by Priyank Kushwah, Ankit Gour, Ayushi Dubey,\n          Gaurav Meravi\n        </h3>\n        <h4>\n          Source API &nbsp;\n          <a href=\"https://disease.sh/v3/covid-19/countries\">\n            https://disease.sh/v3/covid-19/countries\n          </a>\n        </h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}